@use "sass:math";
@use "../common/variables" as *;
@use "../functions/functions" as *;

@mixin paddingX($l, $r:$l) {
  padding-right: $r;
  padding-left: $l;
}

@mixin paddingY($t, $b:$t) {
  padding-top: $t;
  padding-bottom: $b;
}

@mixin marginX($l, $r:$l) {
  margin-right: $r;
  margin-left: $l;
}

@mixin marginY($t, $b:$t) {
  margin-top: $t;
  margin-bottom: $b;
}

@mixin square($value) {
  width: $value;
  height: $value;
}

@mixin dimensions($w,$h:$w) {
  width: $w;
  height: $h;
}

@mixin ie() {
  body.ie & {
    @content;
  }
}

@mixin not-wp() {
  @at-root div:not(#wpwrap) & {
    @content;
  }
}

//region media query

//region {only} media
@mixin small-screen() {
  @media screen and (max-width: $small-screen-max-width) {
    @content;
  }
}

@mixin medium-screen() {
  @media screen and (min-width: $medium-screen-min-width) and (max-width: $medium-screen-max-width) {
    @content;
  }
}

@mixin large-screen() {
  @media screen and (min-width: $large-screen-min-width) {
    @content;
  }
}

//endregion {only} media

//region {max} media
@mixin max-medium-screen() {
  @media screen and (max-width: $medium-screen-max-width) {
    @content;
  }
}

//endregion {max} media

//region {min} media
@mixin min-medium-screen() {
  @media screen and (min-width: $medium-screen-min-width) {
    @content;
  }
}

//endregion {min} media

//endregion media query

@mixin change-gutter($gutter-size-x:false, $gutter-size-y:false) {
  @if ($gutter-size-x) {
    @include marginX(math.div(-$gutter-size-x, 2));
  }
  @if ($gutter-size-y) {
    @include marginY(math.div(-$gutter-size-y, 2));
  }
  > div {
    @if ($gutter-size-x) {
      @include paddingX(math.div($gutter-size-x, 2));
    }
    @if ($gutter-size-y) {
      @include paddingY(math.div($gutter-size-y, 2));
    }
  }
}

// aspect ratio mixin
@mixin aspect-ratio($pt) {
  position: relative;
  height: 0;
  padding-top: $pt;
  img, video {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    object-fit: cover;
  }
}

// flex mixin
@mixin flex($vertical:false, $horizontal:false,$direction:false,$wrap:false) {
  display: flex;
  @if ($vertical) {
    align-items: $vertical;
  }
  @if ($horizontal) {
    justify-content: $horizontal;
  }
  @if ($direction) {
    flex-direction: $direction;
  }
  @if ($wrap) {
    flex-wrap: $wrap;
  }
}

// path mixin
@mixin path($fill:false , $stroke:false) {
  path {
    @if ($fill) {
      fill: $fill;
    }
    @if ($stroke) {
      stroke: $stroke;
    }
  }
}

@mixin font-size($font-size,$line-height:100%) {
  font-size: size(strip-unit($font-size));
  line-height: line-height($font-size, $line-height);
}

// font
@mixin font($size: false, $weight: false,  $lh: 100%,$colour: false,$family:false,$ls:false) {
  //font: italic small-caps bold 12px/30px Georgia, serif;
  @if $size {
    @include font-size($size, $lh)
  }
  @if $weight {
    font-weight: $weight;
  }
  @if $colour {
    color: $colour;
  }
  @if $family {
    font-family: $family;
  }
  @if $ls {
    letter-spacing: $ls;
  }
}


// flex basis mixin
@mixin flexBasis($fb) {
  flex-basis: $fb;
  width: $fb;
}

// objectImg

@mixin objectImg($object:contain) {
  width: 100%;
  height: 100%;
  object-fit: $object;
}

// hide me in ??
@mixin hideMeIn($sm:true,$md:false,$lg:false,$smMd:false,$mdLg:false) {
  @if ($md) {
    @include medium-screen {
      display: none !important;
    }
  }
  @if ($sm) {
    @include small-screen {
      display: none !important;
    }
  }
  @if ($lg) {
    @include min-medium-screen {
      display: none !important;
    }
  }
  @if ($smMd) {
    @include max-medium-screen {
      display: none !important;
    }
  }
  @if ($mdLg) {
    @include min-medium-screen {
      display: none !important;
    }
  }
}


// region number lines of text

@mixin max-lines($number: var(--max-lines)) {
  display: -webkit-box;
  -webkit-line-clamp: $number;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

// endregion number lines of text

// size
$base-size: 10;

@function size($target, $context: $base-size) {
  @return math.div($target , $context) * 1rem;
}
